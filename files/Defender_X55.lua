local function a(b)i2c.start(0)local c=i2c.address(0,0x44,i2c.TRANSMITTER)i2c.write(0,b)i2c.stop(0)return c end;local function d(e)local f,g=pcall(sjson.encode,e)if g and file.open("Defender_X55.init","w")then file.write(g)file.close()end;return f end;local function h(i,j)local c;if not tonumber(j)then return false end;j=tonumber(j)i=string.lower(i)if i=="volume"then c=j<=63 and j>=0 and a(63-j)elseif i=="left"then c=j<=31 and j>=0 and a(128+31-j)elseif i=="right"then c=j<=31 and j>=0 and a(160+31-j)elseif i=="lr"then c=j<=31 and j>=0 and a(192+31-j)elseif i=="subwoofer"then c=j<=31 and j>=0 and a(224+31-j)elseif i=="mute"then if j==1 or j==0 then gpio.write(5,j)c=j;gpio.write(7,j==0 and 1 or 0)else c=false end elseif i=="input"then c=j<=3 and j>=1 and a(79+j)elseif i=="bass"then c=j<=7 and j>=0 and a(96+j)or j<=15 and j>=8 and a(111+8-j)elseif i=="treble"then c=j<=7 and j>=0 and a(112+j)or j<=15 and j>=8 and a(127+8-j)end;if c then _Defender[i]=j;print(i..": "..j)if i=="mute"then d(_Defender)end;if _M then _M:pub("Defender_X55/info/"..i,j)end end;return c end;return function(k)if not _Defender then return end;local g,l={}for m,n in pairs(k)do l=h(m,n)if l~=nil then g[m]=l end end;return g end
